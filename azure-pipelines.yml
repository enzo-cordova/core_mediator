name: $(GITVERSION_FullSemVer)

trigger:
  branches:
    include:
      - master
      - feature/*
  paths:
    include:
      - '*'
    exclude:
     - 'azure-pipelines.yml'
pool:
  vmImage: 'windows-latest'

variables:
  buildConfiguration: 'Release' 
  GitVersion.SemVer: ''
steps :
  - checkout: self
    fetchDepth: 0
  - task: UseDotNet@2
    displayName: 'Descarga e instala el SDK'
    inputs:
      packageType: 'sdk'
      version: "6.0.100"
      useGlobalJson: true
      installationPath: $(Agent.ToolsDirectory)/dotnet
  - script: 'choco install gitversion.portable'
    displayName: 'choco install'
  - script: 'dotnet tool install --global GitVersion.Tool --version  5.10.3  --configfile nuget.config'
    displayName: 'install gitversion'
  # - task: gitversion/setup@0
  #   inputs:
  #     versionSpec: '5.10.0'

  # - task: gitversion/execute@0
  #   displayName: 'Execute GitVersion'
  #   inputs:
  #     useConfigFile: true
  #     configFilePath: 'GitVersion.yml'
  #     updateAssemblyInfo: true

  # - script: 'dotnet tool install --global GitVersion.Tool --version  5.10.3'
  - script: dotnet-gitversion $(Build.SourcesDirectory) /showconfig     
    displayName: 'gitversion showconfig'    
  #- script: dotnet-gitversion $(Build.SourcesDirectory) /config '$(Build.SourcesDirectory)/GitVersion.yml'
  # - script: dotnet-gitversion $(Build.SourcesDirectory) /output buildserver /nofetch      
  # - script: dotnet build -c Release /p:Version='$(GitVersion.NuGetVersion)'     
  #- script: echo current version is $(GitVersion.SemVer)
    # displayName: 'Display calculated version'
  # - script: 'dotnet-gitversion $(Build.SourcesDirectory) /output buildserver /nofetch /config $(Build.SourcesDirectory)/GitVersion.yml'


  - script: 'dotnet-gitversion $(Build.SourcesDirectory) /output json /output buildserver /nocache /updateassemblyinfo AssemblyInfo.cs /ensureassemblyinfo /config $(Build.SourcesDirectory)/GitVersion.yml'
    displayName: 'gitversion get gitversion file'    
  - task: DotNetCoreCLI@2
    displayName: 'dotnet restore'
    inputs:
      command: restore
      projects: '**/*.csproj'

    
 # - task: DotNetCoreCLI@2
 #   displayName: 'dotnet build $(buildConfiguration)'
 #   inputs:
 #     command: 'build'
 #     projects: '**/*.csproj'
 #     arguments: '--configuration $(buildConfiguration) /p:Version=$(GitVersion.SemVer)'
  - script: dotnet build -c Release /p:Version=$(GitVersion.SemVer)   

  - task: DotNetCoreCLI@2
    displayName: 'dotnet test $(buildConfiguration)'
    inputs:
      command: 'test'
      projects: '**/*Tests/*.csproj'
      arguments: '--configuration $(buildConfiguration)'
  
  - task: DotNetCoreCLI@2
    displayName: 'Ejecuta los tests generando un reporte de cobertura'
    continueOnError: true
    inputs:
      command: test
      arguments: ' --collect:"XPlat Code Coverage" /p:CollectCoverage=true /p:CoverletOutputFormat=opencover --logger "console;verbosity=detailed" '

  - task: DotNetCoreCLI@2
    displayName: 'dotnet pack' 
    inputs: 
      command: pack
      packagesToPack: '$(Build.SourcesDirectory)' 
      nobuild: true 
      versioningScheme: byEnvVar 
      versionEnvVar: GitVersion.SemVer


  - task: DotNetCoreCLI@2
    inputs:
      command: 'push'
      packagesToPush: '$(Build.ArtifactStagingDirectory)/*.nupkg'
      nuGetFeedType: 'internal'
      publishVstsFeed: '735d0d07-1a9a-4ff3-b76b-70adb3407038/5a2ed88e-1093-44ec-9c99-eb04b125b27c'

