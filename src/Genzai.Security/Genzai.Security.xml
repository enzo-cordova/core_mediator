<?xml version="1.0"?>
<doc>
    <assembly>
        <name>Genzai.Security</name>
    </assembly>
    <members>
        <member name="T:Genzai.Security.Constant.Constant">
            <summary>
            Constant
            </summary>
        </member>
        <member name="F:Genzai.Security.Constant.Constant.Admin">
            <summary>
            Admin
            </summary>
        </member>
        <member name="T:Genzai.Security.Context.AuthorizationContext">
            <summary>
            Authorization context.
            </summary>
        </member>
        <member name="M:Genzai.Security.Context.AuthorizationContext.#ctor(Microsoft.EntityFrameworkCore.DbContextOptions{Genzai.Security.Context.AuthorizationContext},MediatR.IMediator,System.Security.Claims.ClaimsPrincipal)">
            <summary>
            Initializes a new instance of the <see cref="T:Genzai.Security.Context.AuthorizationContext"/> class.
            </summary>
            <param name="options">Db context options</param>
            <param name="mediator">Mediator service</param>
            <param name="claimsPrincipal">Current principal.</param>
        </member>
        <member name="P:Genzai.Security.Context.AuthorizationContext.Permissions">
            <summary>
            Permissions table
            </summary>
        </member>
        <member name="P:Genzai.Security.Context.AuthorizationContext.Roles">
            <summary>
            Permissions table
            </summary>
        </member>
        <member name="P:Genzai.Security.Context.AuthorizationContext.Users">
            <summary>
            Users
            </summary>
        </member>
        <member name="P:Genzai.Security.Context.AuthorizationContext.Centers">
            <summary>
            Users
            </summary>
        </member>
        <member name="M:Genzai.Security.Context.AuthorizationContext.OnModelCreating(Microsoft.EntityFrameworkCore.ModelBuilder)">
            <inheritdoc/>
        </member>
        <member name="T:Genzai.Security.Context.Mapping.CenterMap">
            <summary>
            Mapping for center
            </summary>
        </member>
        <member name="M:Genzai.Security.Context.Mapping.CenterMap.Configure(Microsoft.EntityFrameworkCore.Metadata.Builders.EntityTypeBuilder{Genzai.Security.Domain.Center})">
            <summary>
            Database configuration for center
            </summary>
            <param name="builder">Builder</param>
        </member>
        <member name="T:Genzai.Security.Context.Mapping.PermissionMap">
            <summary>
            Mapping for permissions
            </summary>
        </member>
        <member name="M:Genzai.Security.Context.Mapping.PermissionMap.Configure(Microsoft.EntityFrameworkCore.Metadata.Builders.EntityTypeBuilder{Genzai.Security.Domain.Permission})">
            <summary>
            Database configuration for Permission
            </summary>
            <param name="builder">Builder</param>
        </member>
        <member name="T:Genzai.Security.Context.Mapping.RoleMap">
            <summary>
            Mapping for Role Table
            </summary>
        </member>
        <member name="M:Genzai.Security.Context.Mapping.RoleMap.Configure(Microsoft.EntityFrameworkCore.Metadata.Builders.EntityTypeBuilder{Genzai.Security.Domain.Role})">
            <summary>
            Database configuration for role table
            </summary>
            <param name="builder">Builder</param>
        </member>
        <member name="T:Genzai.Security.Context.Mapping.UserMap">
            <summary>
            Mapping for users
            </summary>
        </member>
        <member name="M:Genzai.Security.Context.Mapping.UserMap.Configure(Microsoft.EntityFrameworkCore.Metadata.Builders.EntityTypeBuilder{Genzai.Security.Domain.User})">
            <summary>
            Configure method.
            </summary>
            <param name="builder">Entity builder.</param>
        </member>
        <member name="P:Genzai.Security.Domain.Center.Active">
            <summary>
            Active
            </summary>
        </member>
        <member name="P:Genzai.Security.Domain.Center.CustomerId">
            <summary>
            Customer identifier
            </summary>
        </member>
        <member name="P:Genzai.Security.Domain.Center.Users">
            <summary>
            List of users having access to this Center.
            </summary>
        </member>
        <member name="P:Genzai.Security.Domain.Center.Name">
            <summary>
            Name of center
            </summary>
        </member>
        <member name="P:Genzai.Security.Domain.Center.CenterCode">
            <summary>
            CIF
            </summary>
        </member>
        <member name="P:Genzai.Security.Domain.Center.AddressStreetType">
            <summary>
            Type of Address
            </summary>
        </member>
        <member name="P:Genzai.Security.Domain.Center.AddresStreettypeCode">
            <summary>
            Address Type Code
            </summary>
        </member>
        <member name="P:Genzai.Security.Domain.Center.AddressProvinceName">
            <summary>
            Address Province Name
            </summary>
        </member>
        <member name="P:Genzai.Security.Domain.Center.AddressPopulationName">
            <summary>
            Address Population Name
            </summary>
        </member>
        <member name="P:Genzai.Security.Domain.Center.AddressFloor">
            <summary>
            Address Floor
            </summary>
        </member>
        <member name="P:Genzai.Security.Domain.Center.AddressNumber">
            <summary>
            Address Number
            </summary>
        </member>
        <member name="P:Genzai.Security.Domain.Center.AddressStreetName">
            <summary>
            Adreess Street Name
            </summary>
        </member>
        <member name="P:Genzai.Security.Domain.Center.AdrressPostCode">
            <summary>
            Address Post Code
            </summary>
        </member>
        <member name="P:Genzai.Security.Domain.Center.CrmId">
            <summary>
            CRM identifier
            </summary>
        </member>
        <member name="P:Genzai.Security.Domain.Center.Description">
            <summary>
            Description
            </summary>
        </member>
        <member name="P:Genzai.Security.Domain.Center.Assigned">
            <summary>
            Is center ready to receive alarms
            </summary>
        </member>
        <member name="M:Genzai.Security.Domain.Interfaces.IPermissionRepository.GetAllPermissionsByUserAsync(System.String,System.Threading.CancellationToken)">
            <summary>
            Get all the permissions granted to the given role.
            </summary>
            <param name="userCode"></param>
            <param name="cancellationToken">The cancellation token.</param>
            <returns></returns>
        </member>
        <member name="T:Genzai.Security.Domain.Interfaces.IUserRepository">
            <inheritdoc />
        </member>
        <member name="M:Genzai.Security.Domain.Interfaces.IUserRepository.SaveAsync(System.Threading.CancellationToken)">
            <summary>
            Saves the asynchronous.
            </summary>
            <param name="cancellationToken">The cancellation token.</param>
            <returns></returns>
        </member>
        <member name="T:Genzai.Security.Domain.Permission">
            <summary>
            Permission Class
            </summary>
        </member>
        <member name="M:Genzai.Security.Domain.Permission.#ctor(System.String)">
            <summary>
            Constructor
            </summary>
            <param name="name">name of permission</param>
        </member>
        <member name="M:Genzai.Security.Domain.Permission.#ctor(System.Int64)">
            <summary>
            Permission
            </summary>
            <param name="id"></param>
        </member>
        <member name="P:Genzai.Security.Domain.Permission.Roles">
            <summary>
            List of roles assigned to this permission.
            </summary>
        </member>
        <member name="P:Genzai.Security.Domain.Permission.Name">
            <summary>
            Name of permission
            </summary>
        </member>
        <member name="P:Genzai.Security.Domain.Permission.Value">
            <summary>
            bitwise value of permission
            </summary>
        </member>
        <member name="T:Genzai.Security.Domain.Role">
            <summary>
            Role class
            </summary>
        </member>
        <member name="P:Genzai.Security.Domain.Role.Permissions">
            <summary>
            List of permissions assigned to this role.
            </summary> 
        </member>
        <member name="M:Genzai.Security.Domain.Role.PermissionList">
            <summary>
            PermissionList
            </summary>
            <returns></returns>
        </member>
        <member name="P:Genzai.Security.Domain.Role.Users">
            <summary>
            List of users assigned to this role.
            </summary>
        </member>
        <member name="M:Genzai.Security.Domain.Role.isDefaultRole">
            <summary>
            isDefaultRole
            </summary>
            <returns></returns>
        </member>
        <member name="M:Genzai.Security.Domain.Role.isDefaultRole(System.Int64)">
            <summary>
            isDefaultRole
            </summary>
            <param name="id"></param>
            <returns></returns>
        </member>
        <member name="P:Genzai.Security.Domain.Role.Name">
            <summary>
            Name of role
            </summary>
        </member>
        <member name="P:Genzai.Security.Domain.Role.Code">
            <summary>
            Code of role
            </summary>
        </member>
        <member name="P:Genzai.Security.Domain.Role.Description">
            <summary>
            description of role
            </summary>
        </member>
        <member name="T:Genzai.Security.Domain.User">
            <summary>
            User class
            </summary>
        </member>
        <member name="T:Genzai.Security.Domain.User.Authenticated">
            <summary>
            Enum Type Authenticated
            </summary>
        </member>
        <member name="F:Genzai.Security.Domain.User.Authenticated.Public">
            <summary>
            public client
            </summary>
        </member>
        <member name="F:Genzai.Security.Domain.User.Authenticated.Secret">
            <summary>
            client ID and client secret are used
            </summary>
        </member>
        <member name="F:Genzai.Security.Domain.User.Authenticated.Certificate">
            <summary>
            certificate was used
            </summary>
        </member>
        <member name="M:Genzai.Security.Domain.User.#ctor">
            <summary>
            Constructor empty
            </summary>
        </member>
        <member name="M:Genzai.Security.Domain.User.#ctor(System.Int64,System.Boolean,System.String,System.String,System.String,System.String,Genzai.Security.Domain.User.Authenticated)">
            <summary>
            Constructor
            </summary>
            <param name="roleId"></param>
            <param name="active"></param>
            <param name="name"></param>
            <param name="familyName"></param>
            <param name="code"></param>
            <param name="email"></param>
            <param name="typeAuthenticated"></param>
        </member>
        <member name="P:Genzai.Security.Domain.User.TypeAuthenticated">
            <summary>
            RoleId
            </summary>
        </member>
        <member name="P:Genzai.Security.Domain.User.RoleId">
            <summary>
            RoleId
            </summary>
        </member>
        <member name="P:Genzai.Security.Domain.User.Active">
            <summary>
            Active
            </summary>
        </member>
        <member name="P:Genzai.Security.Domain.User.Name">
            <summary>
            Name
            </summary>
        </member>
        <member name="P:Genzai.Security.Domain.User.FamilyName">
            <summary>
            Family Name
            </summary>
        </member>
        <member name="P:Genzai.Security.Domain.User.Code">
            <summary>
            Code
            </summary>
        </member>
        <member name="P:Genzai.Security.Domain.User.Email">
            <summary>
            Email
            </summary>
        </member>
        <member name="P:Genzai.Security.Domain.User.Role">
            <summary>
            Rol
            </summary>
        </member>
        <member name="M:Genzai.Security.Domain.User.UpdateRole(Genzai.Security.Domain.Role)">
            <summary>
            Update Rol Method
            </summary>
            <param name="rol"></param>
        </member>
        <member name="P:Genzai.Security.Domain.User.Centers">
            <summary>
            Centers
            </summary>
        </member>
        <member name="T:Genzai.Security.Enums.PermissionTypes">
            <summary>
            Permission set
            </summary>
        </member>
        <member name="M:Genzai.Security.Extensions.ClaimsPrincipalExtensions.GetObjectId(System.Security.Claims.ClaimsPrincipal)">
            <summary>
            Gets the user's Azure AD object id
            </summary>
        </member>
        <member name="T:Genzai.Security.Filters.HasPermissionAttribute">
            <summary>
            Filter
            </summary>
        </member>
        <member name="M:Genzai.Security.Filters.HasPermissionAttribute.#ctor(Genzai.Security.Enums.PermissionTypes,System.String)">
            <summary>
            Constructor
            </summary>
            <param name="permission"></param>
            <param name="propertyName"></param>
        </member>
        <member name="T:Genzai.Security.Filters.HasPermissionFilter">
            <summary>
            Filter
            </summary>
        </member>
        <member name="P:Genzai.Security.Filters.HasPermissionFilter.Policies">
            <summary>
            Value containing permissions set required
            </summary>
        </member>
        <member name="P:Genzai.Security.Filters.HasPermissionFilter.Property">
            <summary>
            Property
            </summary>
        </member>
        <member name="M:Genzai.Security.Filters.HasPermissionFilter.#ctor(Genzai.Security.Enums.PermissionTypes,Microsoft.Extensions.Logging.ILogger{Genzai.Security.Filters.HasPermissionFilter},Genzai.Core.Caching.IResponseCacheService,System.String)">
            <summary>
            Constructor
            </summary>
            <param name="policies"></param>
            <param name="logger"></param>
            <param name="responseCacheService"></param>
            <param name="propertyName"></param>
            <exception cref="T:System.ArgumentNullException"></exception>
        </member>
        <member name="M:Genzai.Security.Filters.HasPermissionFilter.OnAuthorizationAsync(Microsoft.AspNetCore.Mvc.Filters.AuthorizationFilterContext)">
            <summary>
            OnAuthorization
            </summary>
            <param name="context">context</param>
        </member>
        <member name="T:Genzai.Security.MiddleWares.GLoginMiddleware">
            <summary>
            G-Edge Authorization middleware
            </summary>
        </member>
        <member name="M:Genzai.Security.MiddleWares.GLoginMiddleware.#ctor(Microsoft.AspNetCore.Http.RequestDelegate)">
            <summary>
            Constructor
            </summary>
            <param name="next"></param>
            <exception cref="T:System.ArgumentNullException"></exception>
        </member>
        <member name="M:Genzai.Security.MiddleWares.GLoginMiddleware.Invoke(Microsoft.AspNetCore.Http.HttpContext,Genzai.Security.Services.Interfaces.ITokenService,Microsoft.Extensions.Logging.ILogger{Genzai.Security.MiddleWares.GLoginMiddleware},Genzai.Core.Caching.IResponseCacheService,Genzai.Core.Telemetry.ITelemetryProvider)">
            <summary>
            Invocation
            </summary>
            <param name="httpContext"></param>
            <param name="tokenService"></param>
            <param name="logger"></param>
            <param name="responseCacheService"></param>
            <param name="telemetryProvider"></param>
            <returns></returns>
            <exception cref="T:System.ArgumentNullException"></exception>
            <exception cref="T:System.ArgumentException"></exception>
        </member>
        <member name="T:Genzai.Security.MiddleWares.GToken">
            <summary>
            Token
            </summary>
        </member>
        <member name="P:Genzai.Security.MiddleWares.GToken.PermissionValue">
            <summary>
            Value containing all the permissions set
            </summary>
        </member>
        <member name="P:Genzai.Security.MiddleWares.GToken.RoleCode">
            <summary>
            RoleCode
            </summary>
        </member>
        <member name="P:Genzai.Security.MiddleWares.GToken.Centers">
            <summary>
            Centers
            </summary>
        </member>
        <member name="P:Genzai.Security.MiddleWares.GToken.IsAdmin">
            <summary>
            IsAdmin
            </summary>
        </member>
        <member name="P:Genzai.Security.MiddleWares.GToken.ManageCenters">
            <summary>
            ManageCenters
            </summary>
        </member>
        <member name="P:Genzai.Security.MiddleWares.GToken.User">
            <summary>
            User name
            </summary>
        </member>
        <member name="T:Genzai.Security.MiddleWares.MiddlewareExtensions">
            <summary>
            MiddlewareExtensions
            </summary>
        </member>
        <member name="M:Genzai.Security.MiddleWares.MiddlewareExtensions.UseGLogin(Microsoft.AspNetCore.Builder.IApplicationBuilder)">
            <summary>
            Pipeline helper
            </summary>
            <param name="builder"></param>
            <returns></returns>
        </member>
        <member name="M:Genzai.Security.MiddleWares.MiddlewareExtensions.AddApplicationContextSecurity(Microsoft.Extensions.DependencyInjection.IServiceCollection,Microsoft.Extensions.Configuration.ConfigurationManager)">
            <summary>
            Add EF context database.
            </summary>
            <param name="services">Service Container.</param>
            <param name="config">Configuration root.</param>
        </member>
        <member name="M:Genzai.Security.MiddleWares.MiddlewareExtensions.AddGLogin(Microsoft.Extensions.DependencyInjection.IServiceCollection)">
            <summary>
            Services registration helper
            </summary>
            <param name="serviceCollection"></param>
            <returns></returns>
        </member>
        <member name="T:Genzai.Security.Model.AuthorizationUser">
            <summary>
            AuthorizationUser
            </summary>
        </member>
        <member name="M:Genzai.Security.Model.AuthorizationUser.#ctor(System.Int64,System.Collections.Generic.IEnumerable{Genzai.Security.Domain.Role},System.Collections.Generic.IEnumerable{Genzai.Security.Domain.Center})">
            <summary>
            Constructor
            </summary>
            <param name="permission"></param>
            <param name="listRole"></param>
            <param name="listCenter"></param> 
        </member>
        <member name="P:Genzai.Security.Model.AuthorizationUser.Permission">
            <summary>
            Sum of Permission
            </summary>
        </member>
        <member name="P:Genzai.Security.Model.AuthorizationUser.ListRole">
            <summary>
            ListRole
            </summary>
        </member>
        <member name="P:Genzai.Security.Model.AuthorizationUser.ListCenter">
            <summary>
            ListCenter
            </summary>
        </member>
        <member name="T:Genzai.Security.Repository.PermissionRepository">
            <summary>
            PermissionRepository
            </summary>
        </member>
        <member name="M:Genzai.Security.Repository.PermissionRepository.#ctor(Genzai.Security.Context.AuthorizationContext)">
            <summary>
            Constructor
            </summary>
            <param name="context"></param>
        </member>
        <member name="M:Genzai.Security.Repository.PermissionRepository.GetAllPermissionsByUserAsync(System.String,System.Threading.CancellationToken)">
            <inheritdoc/>
        </member>
        <member name="T:Genzai.Security.Repository.UserRepository">
            <summary>
            RoleRepository
            </summary>
        </member>
        <member name="M:Genzai.Security.Repository.UserRepository.#ctor(Genzai.Security.Context.AuthorizationContext)">
            <summary>
            Constructor
            </summary>
            <param name="context"></param>
        </member>
        <member name="M:Genzai.Security.Repository.UserRepository.SaveAsync(System.Threading.CancellationToken)">
            <summary>
            Save operations
            </summary>
            <param name="cancellationToken"></param>
            <returns></returns>
            <exception cref="T:System.NotImplementedException"></exception>
        </member>
        <member name="T:Genzai.Security.Services.Implementations.AutoEnrollmentService">
            <summary>
            AutoEnrollmentService
            </summary>
        </member>
        <member name="M:Genzai.Security.Services.Implementations.AutoEnrollmentService.#ctor(Genzai.Security.Domain.Interfaces.IUserRepository)">
            <summary>
            Constructor
            </summary>
            <param name="userRepository"></param>
        </member>
        <member name="M:Genzai.Security.Services.Implementations.AutoEnrollmentService.AddUser(Genzai.Security.Domain.User,System.Threading.CancellationToken)">
            <summary>
            AddUser
            </summary>
            <param name="entity"></param>
            <param name="cancellationToken"></param>
            <returns></returns>
        </member>
        <member name="T:Genzai.Security.Services.Implementations.PermissionsService">
            <summary>
            PermissionsService Implementation
            </summary>
        </member>
        <member name="M:Genzai.Security.Services.Implementations.PermissionsService.#ctor(Genzai.Security.Domain.Interfaces.IPermissionRepository,Microsoft.Extensions.Logging.ILogger{Genzai.Security.Services.Implementations.PermissionsService},Genzai.Security.Domain.Interfaces.IUserRepository)">
            <summary>
            Constructor
            </summary>
            <param name="permissionRepository"></param>
            <param name="logger"></param>
            <param name="userRepository"></param>
            <exception cref="T:System.ArgumentNullException"></exception>
        </member>
        <member name="M:Genzai.Security.Services.Implementations.PermissionsService.GetPermissionCode(System.String,System.Threading.CancellationToken)">
            <summary>
            Gets the permissions a user has
            </summary>
            <param name="userCode"></param>
            <param name="cancellationToken"></param>
            <returns></returns>
        </member>
        <member name="T:Genzai.Security.Services.Implementations.TokenService">
            <summary>
            Implementation
            </summary>
        </member>
        <member name="M:Genzai.Security.Services.Implementations.TokenService.#ctor(Genzai.Security.Services.Interfaces.IPermissionsService,Genzai.Security.Services.Interfaces.IAutoEnrollmentService{Genzai.Security.Domain.User},Microsoft.Extensions.Logging.ILogger{Genzai.Security.Services.Implementations.TokenService},Genzai.Core.Telemetry.ITelemetryProvider)">
            <summary>
            Constructor
            </summary>
            <param name="ps"></param>
            <param name="ae"></param>
            <param name="logger"></param>
            <param name="telemetryProvider"></param>
            <exception cref="T:System.ArgumentNullException"></exception>
        </member>
        <member name="M:Genzai.Security.Services.Implementations.TokenService.NewToken(System.Security.Claims.ClaimsPrincipal)">
            <summary>
            NewToken
            </summary>
            <param name="claimPrincipal"></param>
            <returns></returns>
        </member>
        <member name="M:Genzai.Security.Services.Implementations.TokenService.VerifyToken(Genzai.Security.MiddleWares.GToken,System.String)">
            <summary>
            VerifyToken
            </summary>
            <param name="token"></param>
            <param name="userCode"></param>
            <returns></returns>
        </member>
        <member name="T:Genzai.Security.Services.Interfaces.IAutoEnrollmentService`1">
            <summary>
            IAutoEnrollmentService
            </summary>
            <typeparam name="T"></typeparam>
        </member>
        <member name="M:Genzai.Security.Services.Interfaces.IAutoEnrollmentService`1.AddUser(`0,System.Threading.CancellationToken)">
            <summary>
            AddUser
            </summary>
            <typeparam name="T"></typeparam>
            <param name="entity"></param>
            <param name="cancellationToken"></param>
            <returns></returns>
        </member>
        <member name="T:Genzai.Security.Services.Interfaces.IPermissionsService">
            <summary>
            interface
            </summary>
        </member>
        <member name="M:Genzai.Security.Services.Interfaces.IPermissionsService.GetPermissionCode(System.String,System.Threading.CancellationToken)">
            <summary>
            Permissions by user
            </summary>
            <param name="userCode"></param>
            <param name="cancellationToken"></param>
            <returns></returns>
        </member>
        <member name="T:Genzai.Security.Services.Interfaces.ITokenService">
            <summary>
            Interface
            </summary>
        </member>
        <member name="M:Genzai.Security.Services.Interfaces.ITokenService.NewToken(System.Security.Claims.ClaimsPrincipal)">
            <summary>
            Gets a new token and optionally auto-enrolls a new user inserting it in the DB
            </summary>
            <param name="claimPrincipal"></param>
            <returns></returns>
        </member>
        <member name="M:Genzai.Security.Services.Interfaces.ITokenService.VerifyToken(Genzai.Security.MiddleWares.GToken,System.String)">
            <summary>
            Verifies token
            </summary>
            <param name="gToken"></param>
            <param name="userCode"></param>
            <returns></returns>
        </member>
    </members>
</doc>
